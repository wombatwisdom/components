// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package ibm_mq

import (
	"encoding/json"
	"fmt"
	"github.com/wombatwisdom/components/framework/spec"
)

type OutputConfig struct {
	QueueExpr        spec.Expression `json:"topic_expr" yaml:"topic_expr"`

	// The Coded Character Set Identifier for the message. Determines the character
	// encoding of the message data.
	//
	Ccsid string `json:"ccsid,omitempty" yaml:"ccsid,omitempty" mapstructure:"ccsid,omitempty"`

	// The encoding of the message data. Specifies how numeric data is represented.
	//
	Encoding string `json:"encoding,omitempty" yaml:"encoding,omitempty" mapstructure:"encoding,omitempty"`

	// The format of the message data. Indicates the structure and format of the
	// message content.
	//
	Format string `json:"format,omitempty" yaml:"format,omitempty" mapstructure:"format,omitempty"`

	// Optional metadata filters for message headers.
	//
	Metadata *OutputConfigMetadata `json:"metadata,omitempty" yaml:"metadata,omitempty" mapstructure:"metadata,omitempty"`

	// Number of parallel queue manager connections to use. Higher values can improve
	// throughput for high-volume outputs.
	//
	NumThreads int `json:"num_threads,omitempty" yaml:"num_threads,omitempty" mapstructure:"num_threads,omitempty"`

	// The IBM MQ queue name to write messages to.
	//
	QueueName string `json:"queue_name" yaml:"queue_name" mapstructure:"queue_name"`
}

// Optional metadata filters for message headers.
type OutputConfigMetadata struct {
	// If true, exclude metadata fields that match the patterns. If false, include
	// only metadata fields that match the patterns.
	//
	Invert bool `json:"invert" yaml:"invert" mapstructure:"invert"`

	// A list of regular expressions to match metadata fields. If set, only matching
	// metadata fields will be included as MQ message properties.
	//
	Patterns []string `json:"patterns" yaml:"patterns" mapstructure:"patterns"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *OutputConfigMetadata) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["patterns"]; raw != nil && !ok {
		return fmt.Errorf("field patterns in OutputConfigMetadata: required")
	}
	type Plain OutputConfigMetadata
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	if v, ok := raw["invert"]; !ok || v == nil {
		plain.Invert = false
	}
	*j = OutputConfigMetadata(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *OutputConfig) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["queue_name"]; raw != nil && !ok {
		return fmt.Errorf("field queue_name in OutputConfig: required")
	}
	type Plain OutputConfig
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	if v, ok := raw["ccsid"]; !ok || v == nil {
		plain.Ccsid = "1208"
	}
	if v, ok := raw["encoding"]; !ok || v == nil {
		plain.Encoding = "546"
	}
	if v, ok := raw["format"]; !ok || v == nil {
		plain.Format = "MQSTR"
	}
	if v, ok := raw["num_threads"]; !ok || v == nil {
		plain.NumThreads = 1.0
	}
	if 1 > plain.NumThreads {
		return fmt.Errorf("field %s: must be >= %v", "num_threads", 1)
	}
	*j = OutputConfig(plain)
	return nil
}
