// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package ibm_mq

import (
	"encoding/json"
	"fmt"
)

type SystemConfig struct {
	// Optional: Application name for MQ connection identification.
	//
	ApplicationName string `json:"application_name,omitempty" yaml:"application_name,omitempty" mapstructure:"application_name,omitempty"`

	// The IBM MQ channel name for client connections.
	//
	ChannelName string `json:"channel_name,omitempty" yaml:"channel_name,omitempty" mapstructure:"channel_name,omitempty"`

	// The IBM MQ connection name in the format hostname(port).
	//
	ConnectionName string `json:"connection_name,omitempty" yaml:"connection_name,omitempty" mapstructure:"connection_name,omitempty"`

	// Optional: The IBM MQ user password for authentication. This is a sensitive
	// field and you may want to use environment variables.
	//
	Password *string `json:"password,omitempty" yaml:"password,omitempty" mapstructure:"password,omitempty"`

	// The IBM MQ Queue Manager name. This identifies the queue manager to connect to.
	//
	QueueManagerName string `json:"queue_manager_name" yaml:"queue_manager_name" mapstructure:"queue_manager_name"`

	// Optional TLS configuration for encrypted connections.
	//
	Tls *SystemConfigTls `json:"tls,omitempty" yaml:"tls,omitempty" mapstructure:"tls,omitempty"`

	// Optional: The IBM MQ user ID for authentication. This is a sensitive field and
	// you may want to use environment variables.
	//
	UserId *string `json:"user_id,omitempty" yaml:"user_id,omitempty" mapstructure:"user_id,omitempty"`
}

// Optional TLS configuration for encrypted connections.
type SystemConfigTls struct {
	// Optional: Label of the certificate to use from the key repository. If empty,
	// the default label 'ibmwebspheremq{username}' will be used.
	//
	CertificateLabel *string `json:"certificate_label,omitempty" yaml:"certificate_label,omitempty" mapstructure:"certificate_label,omitempty"`

	// The cipher specification for TLS encryption. Examples: ANY_TLS12_OR_HIGHER,
	// ANY_TLS12, TLS_RSA_WITH_AES_128_CBC_SHA256
	//
	CipherSpec string `json:"cipher_spec,omitempty" yaml:"cipher_spec,omitempty" mapstructure:"cipher_spec,omitempty"`

	// Enable TLS encryption for the MQ connection.
	Enabled bool `json:"enabled" yaml:"enabled" mapstructure:"enabled"`

	// Path to the key repository containing certificates. This is a sensitive field
	// and you may want to use environment variables.
	//
	KeyRepository *string `json:"key_repository,omitempty" yaml:"key_repository,omitempty" mapstructure:"key_repository,omitempty"`

	// Password for the key repository. This is a sensitive field and you may want to
	// use environment variables.
	//
	KeyRepositoryPassword *string `json:"key_repository_password,omitempty" yaml:"key_repository_password,omitempty" mapstructure:"key_repository_password,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SystemConfigTls) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	type Plain SystemConfigTls
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	if v, ok := raw["cipher_spec"]; !ok || v == nil {
		plain.CipherSpec = "ANY_TLS12_OR_HIGHER"
	}
	if v, ok := raw["enabled"]; !ok || v == nil {
		plain.Enabled = false
	}
	*j = SystemConfigTls(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SystemConfig) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["queue_manager_name"]; raw != nil && !ok {
		return fmt.Errorf("field queue_manager_name in SystemConfig: required")
	}
	type Plain SystemConfig
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	if v, ok := raw["application_name"]; !ok || v == nil {
		plain.ApplicationName = "WombatWisdom MQ Component"
	}
	if v, ok := raw["channel_name"]; !ok || v == nil {
		plain.ChannelName = "SYSTEM.DEF.SVRCONN"
	}
	if v, ok := raw["connection_name"]; !ok || v == nil {
		plain.ConnectionName = "localhost(1414)"
	}
	*j = SystemConfig(plain)
	return nil
}
