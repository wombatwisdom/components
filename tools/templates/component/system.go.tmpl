package {{.Package}}

import (
    "context"
    "{{.Module}}/spec"
)

// New{{.SystemName}} creates a new {{.SystemName}} system from a raw configuration.
func New{{.SystemName}}(rawConfig string) (*{{.SystemName}}, error) {
    var cfg {{.SystemName}}Config
    if err := cfg.UnmarshalJSON([]byte(rawConfig)); err != nil {
        return nil, err
    }

    return &{{.SystemName}}{
        cfg: cfg,
    }, nil
}

// New{{.SystemName}}FromConfig creates a {{.SystemName}} system from a spec.Config interface.
func New{{.SystemName}}FromConfig(config spec.Config) (*{{.SystemName}}, error) {
    var cfg {{.SystemName}}Config
    if err := config.Decode(&cfg); err != nil {
        return nil, err
    }

    return &{{.SystemName}}{
        cfg: cfg,
    }, nil
}

// {{.SystemName}} represents a {{.ServiceName}} system.
//
// {{.Description}}
type {{.SystemName}} struct {
    cfg {{.SystemName}}Config
    client {{.ClientType}}
}

// Connect establishes connection to {{.ServiceName}}.
func (s *{{.SystemName}}) Connect(ctx context.Context) error {
    // TODO: Implement connection logic
    return nil
}

// Close terminates the connection to {{.ServiceName}}.
func (s *{{.SystemName}}) Close(ctx context.Context) error {
    if s.client != nil {
        // TODO: Implement close logic
        s.client = nil
    }
    return nil
}

// Client returns the underlying {{.ServiceName}} client.
func (s *{{.SystemName}}) Client() {{.ClientType}} {
    return s.client
}