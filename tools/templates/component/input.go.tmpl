package {{.Package}}

import (
    "context"
    "{{.Module}}/spec"
)

// Input reads messages from {{.ServiceName}}.
type Input struct {
    system *{{.SystemName}}
    config InputConfig
    log    spec.Logger
}

// NewInput creates a new {{.ServiceName}} input.
func NewInput(system *{{.SystemName}}, env spec.Environment, config InputConfig) (*Input, error) {
    return &Input{
        system: system,
        config: config,
        log:    env,
    }, nil
}

// Connect establishes the input connection.
func (i *Input) Connect(ctx context.Context) error {
    // TODO: Implement connection logic specific to input
    return nil
}

// Read reads a batch of messages from {{.ServiceName}}.
func (i *Input) Read(ctx context.Context) (spec.Batch, error) {
    // TODO: Implement read logic
    return nil, nil
}

// Disconnect closes the input connection.
func (i *Input) Disconnect(ctx context.Context) error {
    // TODO: Implement disconnect logic
    return nil
}