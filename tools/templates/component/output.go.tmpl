package {{.Package}}

import (
    "context"
    "{{.Module}}/spec"
)

// Output writes messages to {{.ServiceName}}.
type Output struct {
    system *{{.SystemName}}
    config OutputConfig
    log    spec.Logger
}

// NewOutput creates a new {{.ServiceName}} output.
func NewOutput(system *{{.SystemName}}, env spec.Environment, config OutputConfig) (*Output, error) {
    return &Output{
        system: system,
        config: config,
        log:    env,
    }, nil
}

// Connect establishes the output connection.
func (o *Output) Connect(ctx context.Context) error {
    // TODO: Implement connection logic specific to output
    return nil
}

// Write writes a batch of messages to {{.ServiceName}}.
func (o *Output) Write(ctx context.Context, batch spec.Batch) error {
    // TODO: Implement write logic
    return nil
}

// Disconnect closes the output connection.
func (o *Output) Disconnect(ctx context.Context) error {
    // TODO: Implement disconnect logic
    return nil
}