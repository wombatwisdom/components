name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    services:
      nats:
        image: nats:alpine
        ports:
          - 4222:4222
          - 8222:8222
        options: >-
          --health-cmd "nats-server --help"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 3
          --health-start-period 10s
          
      mqtt:
        image: eclipse-mosquitto:latest
        ports:
          - 1883:1883
        options: >-
          --health-cmd "mosquitto_pub -h localhost -t test -m test"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: 1.24

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-1.24-${{ hashFiles('go.work.sum', '**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-1.24-

    - name: Cache IBM MQ Client
      id: cache-mq
      uses: actions/cache@v4
      with:
        path: ${{ runner.temp }}/mqclient
        key: ${{ runner.os }}-ibm-mq-9.4.1.0

    - name: Download and setup IBM MQ Client
      if: steps.cache-mq.outputs.cache-hit != 'true'
      run: |
        mkdir -p ${{ runner.temp }}/mqclient
        cd ${{ runner.temp }}/mqclient
        wget https://public.dhe.ibm.com/ibmdl/export/pub/software/websphere/messaging/mqdev/redist/9.4.1.0-IBM-MQC-Redist-LinuxX64.tar.gz
        tar -xzf 9.4.1.0-IBM-MQC-Redist-LinuxX64.tar.gz
        rm 9.4.1.0-IBM-MQC-Redist-LinuxX64.tar.gz

    - name: Install Task
      uses: arduino/setup-task@v2
      with:
        version: 3.x
        repo-token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup development environment
      run: |
        task setup
        echo "$HOME/go/bin" >> $GITHUB_PATH

    - name: Run tests
      run: task test:all
      env:
        NATS_URL: nats://localhost:4222
        MQTT_URL: tcp://localhost:1883
        CGO_CFLAGS: "-I${{ runner.temp }}/mqclient/inc"
        CGO_LDFLAGS: "-L${{ runner.temp }}/mqclient/lib64 -Wl,-rpath=${{ runner.temp }}/mqclient/lib64"
    - name: Run tests with race detector
      run: task test:race

    - name: Generate test coverage
      run: task test:coverage

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        files: ./coverage.out
        flags: unittests
        name: codecov-umbrella

  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: 1.24

    - name: Install Task
      uses: arduino/setup-task@v2
      with:
        version: 3.x
        repo-token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup development environment
      run: |
        task setup
        echo "$HOME/go/bin" >> $GITHUB_PATH

    - name: Validate all modules
      run: task validate

  build:
    name: Build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: 1.24

    - name: Install Task
      uses: arduino/setup-task@v2
      with:
        version: 3.x
        repo-token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup development environment
      run: |
        task setup
        echo "$HOME/go/bin" >> $GITHUB_PATH

    - name: Build all modules
      run: task build

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: 1.24

    - name: Run basic security checks
      run: |
        echo "Running basic security checks..."
        # Check for common security issues
        grep -r "password" --include="*.go" ./framework ./components || echo "No hardcoded passwords found"
        grep -r "secret" --include="*.go" ./framework ./components || echo "No hardcoded secrets found"
        grep -r "token" --include="*.go" ./framework ./components || echo "No hardcoded tokens found"
        echo "Basic security scan completed"