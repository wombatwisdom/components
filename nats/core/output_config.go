// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package core

import (
	"encoding/json"
	"fmt"
)

type OutputConfig struct {
	// Optional metadata filters
	//
	Metadata *OutputConfigMetadata `json:"metadata,omitempty" yaml:"metadata,omitempty" mapstructure:"metadata,omitempty"`

	// The subject to publish to. The subject may not contain wildcards, but may
	// contain variables that are extracted from the message being processed.
	//
	Subject string `json:"subject" yaml:"subject" mapstructure:"subject"`
}

// Optional metadata filters
type OutputConfigMetadata struct {
	// If set to true, the metadata fields that match the patterns will be excluded
	// from the output. If set to false, the metadata fields that match the patterns
	// will be included in the output.
	//
	Invert bool `json:"invert" yaml:"invert" mapstructure:"invert"`

	// A list of regular expressions to match metadata fields. If set, only the
	// metadata fields that match the patterns will be included in the output.
	//
	Patterns []string `json:"patterns" yaml:"patterns" mapstructure:"patterns"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *OutputConfigMetadata) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["patterns"]; raw != nil && !ok {
		return fmt.Errorf("field patterns in OutputConfigMetadata: required")
	}
	type Plain OutputConfigMetadata
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	if v, ok := raw["invert"]; !ok || v == nil {
		plain.Invert = false
	}
	*j = OutputConfigMetadata(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *OutputConfig) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["subject"]; raw != nil && !ok {
		return fmt.Errorf("field subject in OutputConfig: required")
	}
	type Plain OutputConfig
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = OutputConfig(plain)
	return nil
}
