version: "3"

vars:
  GO_MODULE: github.com/wombatwisdom/components

tasks:
  default:
    desc: Show available tasks
    cmds:
      - task --list-all

  status:
    desc: Show project status
    cmds:
      - echo "WombatWisdom Components Status (Go Workspace):"
      - echo ""
      - echo "Framework module:"
      - echo "  - framework/ - Core interfaces and utilities"
      - echo ""
      - echo "Component modules:"
      - echo "  - components/aws-s3/ - AWS S3 Input component"
      - echo "  - components/mqtt/ - MQTT Input/Output components"  
      - echo "  - components/nats/ - NATS Input/Output components"
      - echo ""
      - echo "Tools:"
      - echo "  - tools/ - Build scripts and templates"
      - echo ""
      - echo "Quick commands:"
      - echo "  task test:all   - Run all workspace tests"
      - echo "  task build:all  - Build all workspace modules"
      - echo "  task lint:all   - Lint all workspace modules"

  # Development Environment
  setup:
    desc: Setup development environment
    cmds:
      - go version
      - go work sync
      - task: tools:install

  clean:
    desc: Clean build artifacts and caches
    cmds:
      - go clean -cache
      - go clean -testcache
      - go clean -modcache

  # Testing Tasks (Multi-Module)
  test:
    desc: Run tests for all workspace modules
    cmds:
      - echo "Running tests for all workspace modules..."
      - go test ./framework/...
      - go test ./components/aws-s3/...
      - go test ./components/mqtt/...
      - go test ./components/nats/...
      - echo "All workspace tests passed!"

  test:all:
    desc: Run all tests in workspace
    cmds:
      - task: test

  test:framework:
    desc: Run framework tests only
    cmds:
      - go test ./framework/... -v

  test:aws-s3:
    desc: Run AWS S3 component tests
    cmds:
      - go test ./components/aws-s3/... -v

  test:mqtt:
    desc: Run MQTT component tests
    cmds:
      - go test ./components/mqtt/... -v

  test:nats:
    desc: Run NATS component tests
    cmds:
      - go test ./components/nats/... -v

  test:coverage:
    desc: Run tests with coverage report
    cmds:
      - go test ./framework/... ./components/aws-s3/... ./components/mqtt/... ./components/nats/... -coverprofile=coverage.out
      - go tool cover -html=coverage.out -o coverage.html
      - echo "Coverage report generated: coverage.html"

  test:race:
    desc: Run tests with race detector
    cmds:
      - go test -race ./framework/... ./components/aws-s3/... ./components/mqtt/... ./components/nats/...

  # Build Tasks (Multi-Module)
  build:
    desc: Build all workspace modules
    cmds:
      - echo "Building all workspace modules..."
      - go build ./framework/...
      - go build ./components/aws-s3/...
      - go build ./components/mqtt/...
      - go build ./components/nats/...
      - echo "All modules built successfully!"

  build:all:
    desc: Build all workspace modules
    cmds:
      - task: build

  build:framework:
    desc: Build framework module
    cmds:
      - go build ./framework/...

  build:aws-s3:
    desc: Build AWS S3 component
    cmds:
      - go build ./components/aws-s3/...

  build:mqtt:
    desc: Build MQTT component
    cmds:
      - go build ./components/mqtt/...

  build:nats:
    desc: Build NATS component
    cmds:
      - go build ./components/nats/...

  build:check:
    desc: Check that all modules compile
    cmds:
      - go build ./framework/... ./components/aws-s3/... ./components/mqtt/... ./components/nats/...

  # Code Quality (Multi-Module)
  lint:
    desc: Run linting checks on all modules
    deps: [tools:install]
    cmds:
      - echo "Running linting checks on all modules..."
      - go vet ./framework/... ./components/aws-s3/... ./components/mqtt/... ./components/nats/...
      - gofmt -l ./framework ./components
      - echo "Linting completed"

  lint:all:
    desc: Run comprehensive linting
    cmds:
      - task: lint
      - task: format:check

  format:
    desc: Format code in all modules
    cmds:
      - go fmt ./framework/... ./components/aws-s3/... ./components/mqtt/... ./components/nats/...
      - |
        if command -v goimports >/dev/null 2>&1; then
          goimports -w ./framework ./components
        else
          echo "goimports not found, skipping import formatting"
        fi

  format:check:
    desc: Check code formatting
    cmds:
      - |
        UNFORMATTED=$(gofmt -l ./framework ./components)
        if [ -n "$UNFORMATTED" ]; then
          echo "The following files need formatting:"
          echo "$UNFORMATTED"
          exit 1
        fi
        echo "All files are properly formatted"

  vet:
    desc: Run go vet on all modules
    cmds:
      - go vet ./framework/... ./components/aws-s3/... ./components/mqtt/... ./components/nats/...

  # Dependency Management (Workspace)
  deps:update:
    desc: Update dependencies for all modules
    cmds:
      - go get -u ./framework/...
      - go get -u ./components/aws-s3/...
      - go get -u ./components/mqtt/...
      - go get -u ./components/nats/...
      - go work sync

  deps:tidy:
    desc: Tidy module dependencies
    cmds:
      - cd framework && go mod tidy
      - cd components/aws-s3 && go mod tidy
      - cd components/mqtt && go mod tidy
      - cd components/nats && go mod tidy
      - cd tools && go mod tidy

  deps:sync:
    desc: Sync workspace dependencies
    cmds:
      - go work sync

  # Schema Generation
  schema:generate:
    desc: Generate schemas for all components
    cmds:
      - task: nats:schema:generate

  nats:schema:generate:
    desc: Generate NATS schemas
    dir: ./components/nats
    cmds:
      - task models:generate

  # CI/CD Tasks
  ci:test:
    desc: Run CI tests for all modules
    cmds:
      - task: test
      - task: format:check
      - task: vet
      - task: build:check

  ci:full:
    desc: Run full CI pipeline
    cmds:
      - task: ci:test
      - task: test:race
      - task: test:coverage

  # Component Management
  component:list:
    desc: List all components
    cmds:
      - echo "Available components:"
      - echo "  - aws-s3 (components/aws-s3/)"
      - echo "  - mqtt (components/mqtt/)"
      - echo "  - nats (components/nats/)"

  component:test:
    desc: Test specific component
    cmds:
      - |
        if [ -z "{{.CLI_ARGS}}" ]; then
          echo "Usage: task component:test -- <component-name>"
          echo "Available: aws-s3, mqtt, nats"
          exit 1
        fi
        go test ./components/{{.CLI_ARGS}}/... -v

  component:build:
    desc: Build specific component
    cmds:
      - |
        if [ -z "{{.CLI_ARGS}}" ]; then
          echo "Usage: task component:build -- <component-name>"
          echo "Available: aws-s3, mqtt, nats"
          exit 1
        fi
        go build ./components/{{.CLI_ARGS}}/...

  # Component Generation
  generate:component:
    desc: Generate a new component from templates
    cmds:
      - go run tools/scripts/generate-component.go {{.CLI_ARGS}}

  # Advanced Testing
  test:integration:
    desc: Run integration tests
    cmds:
      - echo "Running integration tests with services..."
      - |
        export NATS_URL=${NATS_URL:-nats://localhost:4222}
        export MQTT_URL=${MQTT_URL:-tcp://localhost:1883}
        go test ./components/mqtt/... ./components/nats/... -tags=integration -v

  test:benchmark:
    desc: Run benchmark tests
    cmds:
      - go test -bench=. ./framework/... ./components/aws-s3/... ./components/mqtt/... ./components/nats/...

  # Tools Installation
  tools:install:
    desc: Install development tools
    cmds:
      - go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
      - go install golang.org/x/tools/cmd/goimports@latest
      - go install github.com/atombender/go-jsonschema@84c8d2b98bf0373873df8a353b122530a7110c70

  tools:check:
    desc: Check if required tools are installed
    cmds:
      - which golangci-lint || echo "golangci-lint not found - run 'task tools:install'"
      - which goimports || echo "goimports not found - run 'task tools:install'"
      - which go-jsonschema || echo "go-jsonschema not found - run 'task tools:install'"

  # Workspace Utilities
  workspace:sync:
    desc: Sync workspace modules
    cmds:
      - go work sync

  workspace:status:
    desc: Show workspace status
    cmds:
      - go work use -r .
      - echo "Workspace modules:"
      - go list -m -f '{{.Path}}' all | grep github.com/wombatwisdom/components