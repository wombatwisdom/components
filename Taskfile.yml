version: "3"

silent: true

vars:
  GO_MODULE: github.com/wombatwisdom/components

includes:
  nats:
    taskfile: ./nats/Taskfile.yml
    dir: ./nats
  mqtt:
    taskfile: ./mqtt/Taskfile.yml
    dir: ./mqtt
  aws-s3:
    taskfile: ./aws-s3/Taskfile.yml
    dir: ./aws-s3
  aws-eventbridge:
    taskfile: ./aws-eventbridge/Taskfile.yml
    dir: ./aws-eventbridge
  ibm-mq:
    taskfile: ./ibm-mq/Taskfile.yml
    dir: ./ibm-mq
  framework:
    taskfile: ./framework/Taskfile.yml 
    dir: ./framework

tasks:
  default:
    desc: Show available tasks
    cmds:
      - task --list-all

  # Development Environment
  setup:
    desc: Setup development environment
    cmds:
      - go version
      - go work sync
      - go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
      - go install golang.org/x/tools/cmd/goimports@latest
      - go install github.com/atombender/go-jsonschema@84c8d2b98bf0373873df8a353b122530a7110c70

  test:
    desc: Run all tests in workspace
    cmds:
      - task: framework:test
      - task: components:all:test

  test:coverage:
    desc: Run tests with coverage report
    cmds:
      - task: framework:test:coverage
      - task: components:all:test:coverage

  test:race:
    desc: Run tests with race detector
    cmds:
      - task: framework:test:race
      - task: components:all:test:race

  validate:
    desc: Validate all modules
    cmds:
      - task: framework:validate
      - task: components:all:validate
        
  build:
    desc: build all workspace modules
    cmds:
      - task: framework:build
      - task: components:all:build

  deps:sync:
    desc: Sync workspace dependencies
    cmds:
      - go work sync

  vet:
    desc: Run go vet on all modules
    cmds:
      - task: framework:vet
      - task: components:all:vet

  format:
    desc: Format all Go code
    cmds:
      - task: framework:format
      - task: components:all:format

  build:check:
    desc: Check that all modules build successfully
    cmds:
      - task: build

  # Release tasks
  release:rc:
    desc: Create a new release candidate
    vars:
      VERSION: '{{.VERSION | default ""}}'
    cmds:
      - task: release:check
      - |
        if [ -z "{{.VERSION}}" ]; then
          # Auto-determine next RC version
          LAST_TAG=$(git describe --tags --abbrev=0 --match="v*" 2>/dev/null || echo "v0.0.0")
          if [[ $LAST_TAG == *"-rc"* ]]; then
            # Increment RC number
            BASE=$(echo $LAST_TAG | sed 's/-rc.*//')
            RC_NUM=$(echo $LAST_TAG | sed 's/.*-rc//')
            NEW_RC=$((RC_NUM + 1))
            VERSION="${BASE}-rc${NEW_RC}"
          else
            # Create first RC for next minor version
            MAJOR=$(echo $LAST_TAG | cut -d. -f1)
            MINOR=$(echo $LAST_TAG | cut -d. -f2 | cut -d- -f1)
            NEW_MINOR=$((MINOR + 1))
            VERSION="${MAJOR}.${NEW_MINOR}.0-rc1"
          fi
        else
          VERSION="{{.VERSION}}"
        fi
        echo "Creating release candidate: $VERSION"
        task release:tag VERSION=$VERSION

  release:final:
    desc: Create a final release
    vars:
      VERSION: '{{.VERSION | default ""}}'
    cmds:
      - task: release:check
      - |
        if [ -z "{{.VERSION}}" ]; then
          # Remove -rc suffix from latest RC
          LAST_RC=$(git describe --tags --abbrev=0 --match="v*-rc*" 2>/dev/null)
          if [ -z "$LAST_RC" ]; then
            echo "Error: No release candidate found to promote"
            exit 1
          fi
          VERSION=$(echo $LAST_RC | sed 's/-rc.*//')
        else
          VERSION="{{.VERSION}}"
        fi
        echo "Creating final release: $VERSION"
        task release:tag VERSION=$VERSION

  release:tag:
    desc: Create and push tags for all components
    requires:
      vars: [VERSION]
    cmds:
      - git tag -a {{.VERSION}} -m "Release {{.VERSION}}"
      - git tag -a aws-eventbridge/{{.VERSION}} -m "AWS EventBridge component {{.VERSION}}"
      - git tag -a aws-s3/{{.VERSION}} -m "AWS S3 component {{.VERSION}}"
      - git tag -a ibm-mq/{{.VERSION}} -m "IBM MQ component {{.VERSION}}"
      - git tag -a mqtt/{{.VERSION}} -m "MQTT component {{.VERSION}}"
      - git tag -a nats/{{.VERSION}} -m "NATS component {{.VERSION}}"
      - git tag -a framework/{{.VERSION}} -m "Framework {{.VERSION}}"
      - git push origin --tags
      - echo "Successfully created and pushed tags for {{.VERSION}}"

  release:component:
    desc: Release a specific component
    requires:
      vars: [COMPONENT, VERSION]
    cmds:
      - task: release:check
      - git tag -a {{.COMPONENT}}/{{.VERSION}} -m "{{.COMPONENT}} component {{.VERSION}}"
      - git push origin {{.COMPONENT}}/{{.VERSION}}
      - echo "Successfully released {{.COMPONENT}} component {{.VERSION}}"

  release:check:
    desc: Pre-release checks
    cmds:
      - |
        # Check for uncommitted changes
        if [ -n "$(git status --porcelain)" ]; then
          echo "Error: Uncommitted changes detected. Please commit or stash changes before releasing."
          exit 1
        fi
      - |
        # Check we're on main branch
        BRANCH=$(git rev-parse --abbrev-ref HEAD)
        if [ "$BRANCH" != "main" ]; then
          echo "Error: Releases must be created from main branch. Currently on: $BRANCH"
          exit 1
        fi
      - |
        # Ensure we have latest changes
        git fetch origin main
        if [ $(git rev-list HEAD...origin/main --count) -gt 0 ]; then
          echo "Error: Local main branch is not up to date with origin. Please pull latest changes."
          exit 1
        fi
      - echo "✅ Pre-release checks passed"

  release:github:
    desc: Create GitHub release
    vars:
      VERSION: '{{.VERSION}}'
      PRERELEASE: '{{.PRERELEASE | default "false"}}'
    cmds:
      - |
        if [ -z "{{.VERSION}}" ]; then
          echo "Error: VERSION is required"
          exit 1
        fi
        PRERELEASE_FLAG=""
        if [ "{{.PRERELEASE}}" = "true" ]; then
          PRERELEASE_FLAG="--prerelease"
        fi
        gh release create {{.VERSION}} \
          --title "{{.VERSION}}" \
          --notes "See CHANGELOG.md for details" \
          $PRERELEASE_FLAG

  release:verify:
    desc: Verify all tags exist for a version
    vars:
      VERSION: '{{.VERSION}}'
    cmds:
      - |
        if [ -z "{{.VERSION}}" ]; then
          echo "Error: VERSION is required. Usage: task release:verify VERSION=v0.1.0"
          exit 1
        fi
        MISSING=0
        echo "Verifying tags for version {{.VERSION}}..."
        
        # Check main tag
        if ! git tag -l | grep -q "^{{.VERSION}}$"; then
          echo "❌ Missing main repository tag: {{.VERSION}}"
          MISSING=$((MISSING + 1))
        else
          echo "✅ Main repository tag exists: {{.VERSION}}"
        fi
        
        # Check framework tag
        if ! git tag -l | grep -q "^framework/{{.VERSION}}$"; then
          echo "❌ Missing framework tag: framework/{{.VERSION}}"
          MISSING=$((MISSING + 1))
        else
          echo "✅ Framework tag exists: framework/{{.VERSION}}"
        fi
        
        # Check component tags
        for component in aws-eventbridge aws-s3 ibm-mq mqtt nats; do
          if ! git tag -l | grep -q "^${component}/{{.VERSION}}$"; then
            echo "❌ Missing component tag: $component/{{.VERSION}}"
            MISSING=$((MISSING + 1))
          else
            echo "✅ Component tag exists: $component/{{.VERSION}}"
          fi
        done
        
        if [ $MISSING -eq 0 ]; then
          echo "✅ All tags present for version {{.VERSION}}"
        else
          echo "❌ Missing $MISSING tags for version {{.VERSION}}"
          exit 1
        fi

  release:list:
    desc: List release versions
    cmds:
      - |
        echo "Release History:"
        echo "================"
        git tag -l "v*" | grep -v "/" | sort -V -r | head -20

  release:current:
    desc: Show current version
    cmds:
      - |
        CURRENT=$(git describe --tags --abbrev=0 --match="v*" 2>/dev/null || echo "v0.0.0")
        echo "Current version: $CURRENT"

  release:changelog:
    desc: Generate changelog between versions
    vars:
      FROM: '{{.FROM | default ""}}'
      TO: '{{.TO | default "HEAD"}}'
    cmds:
      - |
        if [ -z "{{.FROM}}" ]; then
          FROM=$(git describe --tags --abbrev=0 --match="v*" 2>/dev/null || echo "v0.0.0")
        else
          FROM="{{.FROM}}"
        fi
        TO="{{.TO}}"
        
        echo "## Changelog from $FROM to $TO"
        echo ""
        echo "### Features"
        git log --pretty=format:"- %s (%h)" "$FROM..$TO" | grep -E "^- feat:" | sed 's/^- feat: /- /' || echo "- None"
        
        echo ""
        echo "### Fixes"
        git log --pretty=format:"- %s (%h)" "$FROM..$TO" | grep -E "^- fix:" | sed 's/^- fix: /- /' || echo "- None"
        
        echo ""
        echo "### Other Changes"
        git log --pretty=format:"- %s (%h)" "$FROM..$TO" | grep -vE "^- (feat|fix):" || echo "- None"
        
        echo ""
        echo "### Components Updated"
        for component in aws-eventbridge aws-s3 ibm-mq mqtt nats; do
          if git diff --name-only "$FROM..$TO" | grep -q "^$component/"; then
            echo "- $component"
          fi
        done
        
        if git diff --name-only "$FROM..$TO" | grep -q "^framework/"; then
          echo "- framework"
        fi