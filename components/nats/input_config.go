// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package nats

import (
	"encoding/json"
	"fmt"
)

type InputConfig struct {
	// The maximum number of messages to fetch at a time. This field is used to
	// control the number of messages that are fetched from the NATS server in a
	// single batch.  Processing guarantees apply to the batch, not individual
	// messages. This means that when processing a batch of messages, a failure would
	// cause the entire batch to be reprocessed.
	//
	BatchCount int `json:"batch_count,omitempty" yaml:"batch_count,omitempty" mapstructure:"batch_count,omitempty"`

	// An optional queue group to join. If set, the subscription will be load
	// balancing messages across all members of the group.
	//
	Queue *string `json:"queue,omitempty" yaml:"queue,omitempty" mapstructure:"queue,omitempty"`

	// The subject to subscribe to. The subject may contain wildcards, which will be
	// matched against any subject that matches the pattern.
	//
	Subject string `json:"subject" yaml:"subject" mapstructure:"subject"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *InputConfig) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["subject"]; raw != nil && !ok {
		return fmt.Errorf("field subject in InputConfig: required")
	}
	type Plain InputConfig
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	if v, ok := raw["batch_count"]; !ok || v == nil {
		plain.BatchCount = 1.0
	}
	*j = InputConfig(plain)
	return nil
}
